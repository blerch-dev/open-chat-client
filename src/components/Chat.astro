---
interface Props {
	channel?: string;
    ws_url_overwrite?: string;
	username?: string;
}

const getNum = () => { return Math.floor(Math.random() * 16).toString(16) }
const name = Array(8).map(() => getNum()).join('');

const { channel, ws_url_overwrite, username } = Astro.props;
---

<div class="chat-window">
    <div class="chat-info">
        <div class="chat-session">
            <span>Channel: {channel ?? 'Unknown'}</span>
            <span>User: {username ?? name ?? 'Login'}</span>
        </div>
        <div class="chat-controls">Controls</div>
    </div>
    <div id="chat-message-list" class="chat-messages"></div>
    <div class="chat-input">
        <textarea id="chat-input-elem" placeholder="Message..."></textarea>
        <button id="chat-input-button">Send</button>
    </div>
</div>
<script define:vars={{ name, channel, ws_url_overwrite }}>
    window.name = name;
    window.channel = channel;
    window.ws_url_overwrite = ws_url_overwrite;
</script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        let input = document.getElementById('chat-input-elem') as HTMLTextAreaElement;

        const onInput = (e: any) => {
            if((e.code === 'Enter' || e.code === 'NumpadEnter') && e.shiftKey === false) {
                e.preventDefault();
                e.stopPropagation();
                onSubmit(e);
            }
        }

        const onSubmit = (e: any) => {
            if(input.value === "") { return; }
            sendMessage(input.value);
            input.value = "";
        }

        input?.addEventListener('keydown', onInput);
        document.getElementById('chat-input-button')?.addEventListener('click', onSubmit);

        connnectToURl((window as any)?.ws_url_overwrite ?? `ws://localhost:8000/${(window as any)?.channel ?? window.location.host.split('.')[0]}`);
    });

    var websocket: WebSocket | null = null;
    function connnectToURl(url: string) {
        websocket = new WebSocket(url);
        websocket.onopen = () => { console.log(`Connecting to ${url}...`) }
        websocket.onmessage = (e) => { document.getElementById('chat-message-list')?.appendChild(generateMessageElem(JSON.parse(e.data))); }
    }

    function generateMessageElem(msg: any) {
        console.log("Gen msg:", msg);
        let elem = document.createElement('div');
        let elem2 = document.createElement('span');
        elem2.textContent = msg.name;
        elem.appendChild(elem2);
        elem2 = document.createElement('p');
        elem2.textContent = `: ${msg.text}`;
        elem.appendChild(elem2);
        return elem;
    }

    function sendMessage(value: any) {
        websocket?.send(JSON.stringify({name: window.name, text: value}));
    }
</script>
<style>
    .chat-window {
        height: 100%;
        width: 100%;
        min-height: 100vh;
        min-width: 250px;
        display: flex;
        flex-direction: column;
        flex: 0 1;
        padding: 5px;
        background: #111;
    }

    .chat-window:only-child {
        flex: 1;
    }

    .chat-info {
        overflow: hidden;
        display: flex;
        flex-direction: column;
        border-radius: 5px 5px 0px 0px;
        background-color: #333;
    }

    .chat-session {
        display: flex;
        justify-content: space-between;
        padding: 5px;
    }

    .chat-controls {
        padding: 5px;
    }

    .chat-messages {
        flex: 1 0;
        background-color: #222;
    }

    .chat-input {
        display: flex;
        background-color: #333;
        height: 45px;
        overflow: hidden;
        border-radius: 0px 0px 5px 5px;
    }

    .chat-input textarea {
        resize: none;
        height: 100%;
        border: 0px;
        outline: none;
        padding: 14px 8px;
        flex: 1;
        background: transparent;
        color: #fff;
        min-width: 100px;
        font-size: 15px;
    }

    .chat-input button {
        width: fit-content;
        height: 100%;
        border: 0px;
        border-left: 1px solid #2a2a2a;
        outline: none;
        padding: 5px 10px;
        background: transparent;
        color: #fff;
    }
</style>
